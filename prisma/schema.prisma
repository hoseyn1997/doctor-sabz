generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  Id                   String  @id @default(uuid())
  UserName             String  @unique
  Password             String
  EmailConfirmed       Boolean @default(false)
  PhoneNumber          String  @unique
  PhoneNumberConfirmed Boolean @default(false)
  Role                 String  @default("User")
  Bio                  String?
  Email                String? @unique

  // relations
  Photo       UserPhoto?
  Collections CollectionAttendee[]
}

model Collection {
  Id          String   @id @default(uuid())
  IntId       Int      @unique @default(autoincrement())
  ShortId     String   @unique @db.Char(7)
  Title       String
  Teacher     String
  Cost        String
  DisCount    String
  Description String
  IsActive    Boolean  @default(true)
  CreatedAt   DateTime @default(now())
  UpdatedAt   DateTime @updatedAt
  Category    String?
  Level       String?
  Score       Int?

  // relations
  Videos    Video[]
  Photo     CollectionPhoto?
  Attendees CollectionAttendee[]

  @@index([Cost, DisCount])
  @@index([Title, Description])
}

model CollectionPhoto {
  Id           String @id @default(uuid())
  PhotoId      String
  CollectionId String @unique

  // relations
  Collection Collection @relation(fields: [CollectionId], references: [Id], onDelete: Cascade)
  Photo      Photo      @relation(fields: [PhotoId], references: [Id], onDelete: Cascade)

  @@unique([PhotoId, CollectionId])
}

model Photo {
  Id       String @id @default(uuid())
  FilePath String

  // relations
  Collections CollectionPhoto[]
  Users       UserPhoto[]
}

model CollectionAttendee {
  Id             String   @id @default(uuid())
  IsHost         Boolean
  IsAllowed      Boolean
  UserId         String
  CollectionId   String
  AttendanceDate DateTime @default(now())

  // relations
  Collection Collection @relation(fields: [CollectionId], references: [Id], onDelete: Cascade)
  User       User       @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@unique([UserId, CollectionId])
  @@index([AttendanceDate])
}

model UserPhoto {
  Id      String @id @default(uuid())
  PhotoId String
  UserId  String @unique

  // relations
  Photo Photo @relation(fields: [PhotoId], references: [Id], onDelete: Cascade)
  User  User  @relation(fields: [UserId], references: [Id], onDelete: Cascade)

  @@unique([PhotoId, UserId])
}

model Video {
  Id           String   @id @default(uuid())
  IntId        Int      @unique @default(autoincrement())
  ShortId      String   @unique @db.Char(7)
  Title        String
  Description  String?
  Order        Int
  FilePath     String
  CreatedAt    DateTime @default(now())
  UpdatedAt    DateTime @updatedAt
  CollectionId String

  // relations
  Collection Collection @relation(fields: [CollectionId], references: [Id], onDelete: Cascade)

  @@index([CollectionId, Order])
}
